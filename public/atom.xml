<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>九十 | shamopoo&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shamopoo.top/"/>
  <updated>2018-12-25T02:56:03.000Z</updated>
  <id>http://shamopoo.top/</id>
  
  <author>
    <name>shamopoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>30 seconds of Javascript</title>
    <link href="http://shamopoo.top/30-seconds-of-js/"/>
    <id>http://shamopoo.top/30-seconds-of-js/</id>
    <published>2018-12-21T03:44:39.000Z</published>
    <updated>2018-12-25T02:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Gitgub上看见一个好玩的项目 <a href="https://github.com/30-seconds/30-seconds-of-code#-adapter-1" target="_blank" rel="noopener">30 seconds of code</a>，js真好玩。<br><a id="more"></a></p><h2 id="🔌-适配"><a href="#🔌-适配" class="headerlink" title="🔌 适配"></a>🔌 适配</h2><h3 id="ary"><a href="#ary" class="headerlink" title="ary"></a>ary</h3><p>创建一个最多可以接受<code>n</code>个参数的函数。<br>调用提供的函数，<code>fn</code>，最多n个参数。<br>运用<code>Array.prototype.slice(0,n)</code>和展开运算符<code>…</code></p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> ary = <span class="function">(<span class="params">fn, n</span>) =&gt;</span> (...args) =&gt; fn(...args.slice(<span class="number">0</span>, n));</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> firstTwoMax = ary(<span class="built_in">Math</span>.max, <span class="number">2</span>);[[<span class="number">2</span>, <span class="number">6</span>, <span class="string">'a'</span>], [<span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">10</span>]].map(<span class="function"><span class="params">x</span> =&gt;</span> firstTwoMax(...x));  <span class="comment">// [6, 8, 10]</span></code></pre><p></p><h3 id="over"><a href="#over" class="headerlink" title="over"></a>over</h3><p>创建一个函数，该函数使用它接收的参数调用每个提供的函数并返回结果。<br>使用<code>Array.prototype.map()</code>和<code>Function.prototype.apply()</code>将每个函数应用于给定的参数。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> ary = <span class="function">(<span class="params">fn, n</span>) =&gt;</span> (...args) =&gt; fn(...args.slice(<span class="number">0</span>, n));</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> firstTwoMax = ary(<span class="built_in">Math</span>.max, <span class="number">2</span>);[[<span class="number">2</span>, <span class="number">6</span>, <span class="string">'a'</span>], [<span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">10</span>]].map(<span class="function"><span class="params">x</span> =&gt;</span> firstTwoMax(...x));  <span class="comment">// [6, 8, 10]</span></code></pre><p></p><h3 id="unary"><a href="#unary" class="headerlink" title="unary"></a>unary</h3><p>创建只接受一个参数的函数。<br>调用提供的函数<code>fn</code>, 只返回第一个参数。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> unary = <span class="function"><span class="params">fn</span> =&gt;</span> val =&gt; fn(val);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">[<span class="string">'6'</span>, <span class="string">'8'</span>, <span class="string">'10'</span>].map(unary(<span class="built_in">parseInt</span>)); <span class="comment">// [6, 8, 10]</span></code></pre><p></p><h2 id="📚-Array"><a href="#📚-Array" class="headerlink" title="📚 Array"></a>📚 Array</h2><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>如果为集合中的所有元素提供的函数返回<code>true</code>，则返回<code>true</code>，否则返回<code>false</code>。<br>使用<code>Array.prototype.every()</code>来测试集合中的所有元素是否基于<code>fn</code>返回<code>true</code>。 省略第二个参数<code>fn</code>，使用<code>Boolean</code>作为默认值。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> all = <span class="function">(<span class="params">arr, fn = <span class="built_in">Boolean</span></span>) =&gt;</span> arr.every(fn);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">all([<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>], x =&gt; x &gt; <span class="number">1</span>); <span class="comment">// true</span>all([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></code></pre><p></p><h3 id="allEqual"><a href="#allEqual" class="headerlink" title="allEqual"></a>allEqual</h3><p>判断数组的所有元素是否相等。<br>使用<code>Array.prototype.every()</code>判断数组的所有元素是否与第一个元素相等。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> allEqual = <span class="function"><span class="params">arr</span> =&gt;</span> arr.every(<span class="function"><span class="params">val</span> =&gt;</span> val === arr[<span class="number">0</span>]);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">allEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]); <span class="comment">// false</span>allEqual([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]); <span class="comment">// true</span></code></pre><p></p><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>如果为集合中的至少一个元素提供的函数返回<code>true</code>，则返回<code>true</code>，否则返回<code>false</code>。<br>使用<code>Array.prototype.some()</code>来测试集合中的所有元素是否基于<code>fn</code>返回<code>true</code>。 省略第二个参数<code>fn</code>，使用<code>Boolean</code>作为默认值。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> any = <span class="function">(<span class="params">arr, fn = <span class="built_in">Boolean</span></span>) =&gt;</span> arr.some(fn);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">any([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>], x =&gt; x &gt;= <span class="number">2</span>); <span class="comment">// true</span>any([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]); <span class="comment">// true</span></code></pre><p></p><h3 id="bifurcate"><a href="#bifurcate" class="headerlink" title="bifurcate"></a>bifurcate</h3><p>将值拆分为两组。 如果过滤器中的元素是真的，则集合中的对应元素属于第一组; 否则，它属于第二组。<br>使用<code>Array.prototype.reduce()</code>和<code>Array.prototype.push()</code>根据过滤器向数组添加元素。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> bifurcate = <span class="function">(<span class="params">arr, filter</span>) =&gt;</span>  arr.reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> (acc[filter[i] ? <span class="number">0</span> : <span class="number">1</span>].push(val), acc), [[], []]);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">bifurcate([<span class="string">'beep'</span>, <span class="string">'boop'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>], [<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>]); <span class="comment">// [ ['beep', 'boop', 'bar'], ['foo'] ]</span></code></pre><p></p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>将数组分割为指定大小的数组。<br>使用<code>Array.from()</code>创建一个新数组，该数组符合指定大小。 使用<code>Array.prototype.slice()</code>将新数组的每个元素映射到一个大小的数组中。 如果原始数组无法均匀分割，则最终的数组包含其余元素。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> chunk = <span class="function">(<span class="params">arr, size</span>) =&gt;</span>  <span class="built_in">Array</span>.from({ <span class="attr">length</span>: <span class="built_in">Math</span>.ceil(arr.length / size) }, (v, i) =&gt;    arr.slice(i * size, i * size + size)  );</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">chunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>); <span class="comment">// [[1,2],[3,4],[5]]</span></code></pre><p></p><h3 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h3><p>使用<code>Array.prototype.filter()</code> 从数组中删除<code> (false, null, 0, “”, undefined, and NaN)</code> 。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> compact = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="built_in">Boolean</span>);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'e'</span> * <span class="number">23</span>, <span class="literal">NaN</span>, <span class="string">'s'</span>, <span class="number">34</span>]); <span class="comment">// [ 1, 2, 3, 'a', 's', 34 ]</span></code></pre><p></p><h3 id="countBy"><a href="#countBy" class="headerlink" title="countBy"></a>countBy</h3><p>基于给定函数对数组的元素进行分组，并返回每个组中元素的数量。<br>使用<code>Array.prototype.map()</code>将数组的值映射到函数或属性名称。 使用<code>Array.prototype.reduce()</code>创建一个对象，其中的键是从映射结果生成的。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> countBy = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span>  arr.map(<span class="keyword">typeof</span> fn === <span class="string">'function'</span> ? fn : <span class="function"><span class="params">val</span> =&gt;</span> val[fn]).reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> {    acc[val] = (acc[val] || <span class="number">0</span>) + <span class="number">1</span>;    <span class="keyword">return</span> acc;  }, {});</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">countBy([<span class="number">6.1</span>, <span class="number">4.2</span>, <span class="number">6.3</span>], <span class="built_in">Math</span>.floor); <span class="comment">// {4: 1, 6: 2}</span>countBy([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>], <span class="string">'length'</span>); <span class="comment">// {3: 2, 5: 1}</span></code></pre><p></p><h3 id="countOccurrences"><a href="#countOccurrences" class="headerlink" title="countOccurrences"></a>countOccurrences</h3><p>计算数组的元素出现的次数。<br>使用<code>Array.prototype.reduce()</code>递增器计算数组每个元素出现的次数。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> countOccurrences = <span class="function">(<span class="params">arr, val</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> (v === val ? a + <span class="number">1</span> : a), <span class="number">0</span>);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">countOccurrences([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>); <span class="comment">// 3</span></code></pre><p></p><h3 id="deepFlatten"><a href="#deepFlatten" class="headerlink" title="deepFlatten"></a>deepFlatten</h3><p>深度展平一维数组。<br>运用递归。使用<code>Array.prototype.concat()</code>、空数组<code>[]</code>和展开运算符<br><code>…</code>去展平数组。递归地展平数组的每个元素。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> deepFlatten = <span class="function"><span class="params">arr</span> =&gt;</span> [].concat(...arr.map(<span class="function"><span class="params">v</span> =&gt;</span> (<span class="built_in">Array</span>.isArray(v) ? deepFlatten(v) : v)));</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">deepFlatten([<span class="number">1</span>, [<span class="number">2</span>], [[<span class="number">3</span>], <span class="number">4</span>], <span class="number">5</span>]); <span class="comment">// [1,2,3,4,5]</span>[<span class="number">1</span>, [<span class="number">2</span>], [[<span class="number">3</span>], <span class="number">4</span>], <span class="number">5</span>].toString().split(<span class="string">','</span>) <span class="comment">//  ✅ [1,2,3,4,5]</span></code></pre><p></p><h3 id="filterNonUnique"><a href="#filterNonUnique" class="headerlink" title="filterNonUnique"></a>filterNonUnique</h3><p>过滤掉数组中的非唯一值。<br>使用<code>Array.prototype.filter()</code>用于仅包含唯一值的数组。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> filterNonUnique = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="function"><span class="params">i</span> =&gt;</span> arr.indexOf(i) === arr.lastIndexOf(i));</code></pre><p></p><p><samp></samp></p><pre><code class="JAVASCRIPT">filterNonUnique([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// [1, 3, 5]</span></code></pre><p></p><h3 id="forEachRight"><a href="#forEachRight" class="headerlink" title="forEachRight"></a>forEachRight</h3><p>从数组的最后一个元素开始，为每个数组元素执行一次提供的函数。<br>使用<code>Array.prototype.slice(0)</code>克隆给定的数组，<br>使用<code>Array.prototype.reverse()</code>来反转它，<br>使用<code>Array.prototype.forEach()/<code>迭代反向数组。</code></code></p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> forEachRight = <span class="function">(<span class="params">arr, callback</span>) =&gt;</span>  arr    .slice(<span class="number">0</span>)    .reverse()    .forEach(callback);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">forEachRight([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], val =&gt; <span class="built_in">console</span>.log(val)); <span class="comment">// '4', '3', '2', '1'</span></code></pre><p></p><h3 id="indexOfAll"><a href="#indexOfAll" class="headerlink" title="indexOfAll"></a>indexOfAll</h3><p>返回数组中val的所有索引。 如果val不存在，则返回[]。<br>使用<code>Array.prototype.reduce()</code>循环元素并存储匹配元素的索引，返回索引数组。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> indexOfAll = <span class="function">(<span class="params">arr, val</span>) =&gt;</span>arr.reduce(<span class="function">(<span class="params">acc, el, i</span>) =&gt;</span> (el === val ? [...acc, i] : acc), []);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">indexOfAll([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>); <span class="comment">// [0,3]</span>indexOfAll([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>); <span class="comment">// []</span></code></pre><p></p><h3 id="initialize2DArray"><a href="#initialize2DArray" class="headerlink" title="initialize2DArray"></a>initialize2DArray</h3><p>初始化给定宽度和高度的2D数组。<br>使用<code>Array.prototype.map()</code>生成<code>h</code>行，其中每个行都是一个大小为<code>w</code>的初始化的新数组。 如果<code>val</code>未传值，则默认为null。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> initialize2DArray = <span class="function">(<span class="params">w, h, val = <span class="literal">null</span></span>) =&gt;</span>  <span class="built_in">Array</span>.from({ <span class="attr">length</span>: h }).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Array</span>.from({ <span class="attr">length</span>: w }).fill(val));</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">initialize2DArray(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>); <span class="comment">// [[0,0], [0,0]]</span>initialize2DArray(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [[null], [null]]</span></code></pre><p></p><h3 id="initializeArrayWithValues"><a href="#initializeArrayWithValues" class="headerlink" title="initializeArrayWithValues"></a>initializeArrayWithValues</h3><p>使用指定的值初始化并填充数组。<br>使用<code>Array(n)</code>创建所需长度的数组，<code>fill(v)</code>填充。 如果<code>val</code>未传，默认值为0。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> initializeArrayWithValues = <span class="function">(<span class="params">n, val = <span class="number">0</span></span>) =&gt;</span> <span class="built_in">Array</span>(n).fill(val);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">initializeArrayWithValues(<span class="number">5</span>, <span class="number">2</span>); <span class="comment">// [2, 2, 2, 2, 2]</span></code></pre><p></p><h3 id="mapObject"><a href="#mapObject" class="headerlink" title="mapObject"></a>mapObject</h3><p>使用函数将数组的值映射到对象，其中键 - 值对由原始值作为键和映射值组成。<br>使用匿名内部函数作用域来声明未定义的内存空间，使用闭包来存储返回值。<br>使用新数组来存储数组，其中包含函数的数据集，并使用逗号运算符返回第二步，<br>而无需从一个上下文移动到另一个上下文（由于闭包和操作顺序）。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> mapObject = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span>  (<span class="function"><span class="params">a</span> =&gt;</span> (    (a = [arr, arr.map(fn)]),     a[<span class="number">0</span>].reduce(<span class="function">(<span class="params">acc, val, ind</span>) =&gt;</span> ((acc[val] = a[<span class="number">1</span>][ind]), acc), {})  ))();</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> squareIt = <span class="function"><span class="params">arr</span> =&gt;</span> mapObject(arr, a =&gt; a * a);squareIt([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// { 1: 1, 2: 4, 3: 9 }</span></code></pre><p></p><h3 id="similarity"><a href="#similarity" class="headerlink" title="similarity"></a>similarity</h3><p>返回两个数组中都出现的元素数组。<br>使用<code>Array.prototype.filter()</code>过滤不属于数组的值，使用<code>Array.prototype.includes</code>判断。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> similarity = <span class="function">(<span class="params">arr, values</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> values.includes(v));</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">similarity([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]); <span class="comment">// [1, 2]</span></code></pre><p></p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>返回两个数组中任何一个中只存在一次元素的数组。</p><p>使用<code>…</code>a和b的所有值创建一个Set并用<code>Array.from()</code>转换为数组。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> union = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]));</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">union([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]); <span class="comment">// [1,2,3,4]</span></code></pre><p></p><h2 id="🌐-Browser"><a href="#🌐-Browser" class="headerlink" title="🌐 Browser"></a>🌐 Browser</h2><h3 id="detectDeviceType"><a href="#detectDeviceType" class="headerlink" title="detectDeviceType"></a>detectDeviceType</h3><p>检测网站是否在移动设备或台式机/笔记本电脑中打开。<br>使用正则表达式测试<code>navigator.userAgent</code>属性，以确定设备是移动设备还是台式机/笔记本电脑。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> detectDeviceType = <span class="function"><span class="params">()</span> =&gt;</span>  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test  (navigator.userAgent)  ? <span class="string">'Mobile'</span>  : <span class="string">'Desktop'</span>;</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">detectDeviceType();  <span class="comment">// Desktop</span></code></pre><p></p><h3 id="elementContains"><a href="#elementContains" class="headerlink" title="elementContains"></a>elementContains</h3><p>如果父元素包含子元素，则返回<code>true</code>，否则返回<code>false</code>。<br>先检查父元素与子元素不是同一元素，再使用<code>parent.contains(child)</code>检查父元素是否包含子元素。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> elementContains = <span class="function">(<span class="params">parent, child</span>) =&gt;</span> parent !== child &amp;&amp; parent.contains(child);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">_query (tag){  <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(tag)}elementContains(_query(<span class="string">'head'</span>),  _query(<span class="string">'title'</span>));  <span class="comment">// true</span>elementContains(_query(<span class="string">'body'</span>),  _query(<span class="string">'body'</span>)); <span class="comment">// false</span></code></pre><p></p><h3 id="getScrollPosition"><a href="#getScrollPosition" class="headerlink" title="getScrollPosition"></a>getScrollPosition</h3><p>返回当前页面的滚动位置。<br>如果已定义，则使用<code>pageXOffset</code>和<code>pageYOffset</code>，否则使用<code>scrollLeft</code>和<code>scrollTop</code>。 您可以省略<code>el</code>以使用窗口的默认值。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> getScrollPosition = <span class="function">(<span class="params">el = <span class="built_in">window</span></span>) =&gt;</span> ({  x: el.pageXOffset !== <span class="literal">undefined</span> ? el.pageXOffset : el.scrollLeft,  y: el.pageYOffset !== <span class="literal">undefined</span> ? el.pageYOffset : el.scrollTop});</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">getScrollPosition(); <span class="comment">// {x: 0, y: 200}</span></code></pre><p></p><h3 id="getStyle"><a href="#getStyle" class="headerlink" title="getStyle"></a>getStyle</h3><p>返回指定元素的CSS规则的值。<br>使用<code>Window.getComputedStyle()</code>获取指定元素的CSS规则的值。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> getStyle = <span class="function">(<span class="params">el, ruleName</span>) =&gt;</span> getComputedStyle(el)[ruleName];</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">getStyle(<span class="built_in">document</span>.querySelector(<span class="string">'p'</span>), <span class="string">'font-size'</span>); <span class="comment">// '16px'</span></code></pre><p></p><h3 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass"></a>hasClass</h3><p>如果元素具有指定的类，则返回<code>true</code>，否则返回<code>false</code>。<br>使用<code>element.classList.contains()</code>检查元素是否具有指定的类。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> hasClass = <span class="function">(<span class="params">el, className</span>) =&gt;</span> el.classList.contains(className);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">hasClass(<span class="built_in">document</span>.querySelector(<span class="string">'p.special'</span>), <span class="string">'special'</span>); <span class="comment">// true</span></code></pre><p></p><h2 id="⏱️-Date"><a href="#⏱️-Date" class="headerlink" title="⏱️ Date"></a>⏱️ Date</h2><h3 id="formatDuration"><a href="#formatDuration" class="headerlink" title="formatDuration"></a>formatDuration</h3><p>返回给定毫秒数的可读格式。</p><p>将<code>ms</code>除以适当的值，以获得白天，小时，分钟，秒和毫秒的可读值。<br>使用 <code>Object.entries()<code>和<code>Array.prototype.filter()<code>仅保留非零值。<br>使用<code>Array.prototype.map()<code>为每个值创建字符串。<br>使用<code>String.prototype.join(‘,’)<code>将值组合成一个字符串。</code></code></code></code></code></code></code></code></p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> formatDuration = <span class="function"><span class="params">ms</span> =&gt;</span> {  <span class="keyword">if</span> (ms &lt; <span class="number">0</span>) ms = -ms;  <span class="keyword">const</span> time = {    day: <span class="built_in">Math</span>.floor(ms / <span class="number">86400000</span>),    hour: <span class="built_in">Math</span>.floor(ms / <span class="number">3600000</span>) % <span class="number">24</span>,    minute: <span class="built_in">Math</span>.floor(ms / <span class="number">60000</span>) % <span class="number">60</span>,    second: <span class="built_in">Math</span>.floor(ms / <span class="number">1000</span>) % <span class="number">60</span>,    millisecond: <span class="built_in">Math</span>.floor(ms) % <span class="number">1000</span>  };  <span class="keyword">return</span> <span class="built_in">Object</span>.entries(time)    .filter(<span class="function"><span class="params">val</span> =&gt;</span> val[<span class="number">1</span>] !== <span class="number">0</span>)    .map(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> <span class="string">`<span class="subst">${val}</span> <span class="subst">${key}</span><span class="subst">${val !== <span class="number">1</span> ? <span class="string">'s'</span> : <span class="string">''</span>}</span>`</span>)    .join(<span class="string">', '</span>);};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">formatDuration(<span class="number">1001</span>); <span class="comment">// '1 second, 1 millisecond'</span>formatDuration(<span class="number">34325055574</span>); <span class="comment">// '397 days, 6 hours, 44 minutes, 15 seconds, 574 milliseconds'</span></code></pre><p></p><h2 id="🎛️-Function"><a href="#🎛️-Function" class="headerlink" title="🎛️ Function"></a>🎛️ Function</h2><h3 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h3><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, ms = <span class="number">0</span></span>) =&gt;</span> {  <span class="keyword">let</span> timeoutId;  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>{    clearTimeout(timeoutId);    timeoutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> fn.apply(<span class="keyword">this</span>, args), ms);  };};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="built_in">window</span>.addEventListener(  <span class="string">'resize'</span>,  debounce(<span class="function"><span class="params">()</span> =&gt;</span> {    <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth);    <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerHeight);  }, <span class="number">250</span>)); <span class="comment">// Will log the window dimensions at most every 250ms</span></code></pre><p></p><h3 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h3><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, wait</span>) =&gt;</span> {  <span class="keyword">let</span> inThrottle, lastFn, lastTime;  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{    <span class="keyword">const</span> context = <span class="keyword">this</span>,      args = <span class="built_in">arguments</span>;    <span class="keyword">if</span> (!inThrottle) {      fn.apply(context, args);      lastTime = <span class="built_in">Date</span>.now();      inThrottle = <span class="literal">true</span>;    } <span class="keyword">else</span> {      clearTimeout(lastFn);      lastFn = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{        <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - lastTime &gt;= wait) {          fn.apply(context, args);          lastTime = <span class="built_in">Date</span>.now();        }      }, <span class="built_in">Math</span>.max(wait - (<span class="built_in">Date</span>.now() - lastTime), <span class="number">0</span>));    }  };};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="built_in">window</span>.addEventListener(  <span class="string">'resize'</span>,  throttle(<span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>{    <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth);    <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerHeight);  }, <span class="number">250</span>)); <span class="comment">// Will log the window dimensions at most every 250ms</span></code></pre><p></p><h2 id="➗-Math"><a href="#➗-Math" class="headerlink" title="➗ Math"></a>➗ Math</h2><h3 id="distance"><a href="#distance" class="headerlink" title="distance"></a>distance</h3><p>返回两点之间的距离。<br>使用<code>Math.hypot()</code>计算两点之间的欧几里德距离。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> distance = <span class="function">(<span class="params">x0, y0, x1, y1</span>) =&gt;</span> <span class="built_in">Math</span>.hypot(x1 - x0, y1 - y0);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">distance(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 2.23606797749979</span></code></pre><p></p><h3 id="factorial"><a href="#factorial" class="headerlink" title="factorial"></a>factorial</h3><p>使用递归计算数字的阶乘。<br>如果<code>n</code>小于或等于1，则返回1。否则，返回<code>n</code>的乘积和<code>n  -  1</code>的阶乘。如果<code>n</code>是负数，则抛出异常。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> factorial = <span class="function"><span class="params">n</span> =&gt;</span>  n &lt; <span class="number">0</span>    ? <span class="function">(<span class="params">(</span>) =&gt;</span> {      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Negative numbers are not allowed!'</span>);    })()    : n &lt;= <span class="number">1</span>      ? <span class="number">1</span>      : n * factorial(n - <span class="number">1</span>);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">factorial(<span class="number">6</span>); <span class="comment">// 720</span></code></pre><p></p><h3 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h3><p>计算两个或多个数字/数组之间的最大公约数。<br>内部<code>_gcd</code>函数使用递归计算返回<code>y</code>的<code>GCD</code>和除法<code>x / y</code>的余数。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> gcd = <span class="function">(<span class="params">...arr</span>) =&gt;</span> {  <span class="keyword">const</span> _gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> (!y ? x : gcd(y, x % y));  <span class="keyword">return</span> [...arr].reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> _gcd(a, b));};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">gcd(<span class="number">8</span>, <span class="number">36</span>); <span class="comment">// 4</span>gcd(...[<span class="number">12</span>, <span class="number">8</span>, <span class="number">32</span>]); <span class="comment">// 4</span></code></pre><p></p><h3 id="randomIntArrayInRange"><a href="#randomIntArrayInRange" class="headerlink" title="randomIntArrayInRange"></a>randomIntArrayInRange</h3><p>返回指定范围内的n个随机整数的数组。<br>使用<code>Array.from()</code>创建一个特定长度的数组，<code>Math.random()</code>生成一个范围内的随机数，使用<code>Math.floor</code>向下取整。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> randomIntArrayInRange = <span class="function">(<span class="params">min, max, n = <span class="number">1</span></span>) =&gt;</span>  <span class="built_in">Array</span>.from({ <span class="attr">length</span>: n }, () =&gt;   <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">randomIntArrayInRange(<span class="number">12</span>, <span class="number">35</span>, <span class="number">10</span>); <span class="comment">// [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]</span></code></pre><p></p><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><p>返回数组的总和。<br>使用<code>Array.prototype.reduce()</code>将每个值累加，使用值0初始化。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> sum = <span class="function">(<span class="params">...arr</span>) =&gt;</span> [...arr].reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 10</span>sum(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// 10</span></code></pre><p></p><h2 id="🗃️-Object"><a href="#🗃️-Object" class="headerlink" title="🗃️ Object"></a>🗃️ Object</h2><h3 id="deepClone"><a href="#deepClone" class="headerlink" title="deepClone"></a>deepClone</h3><p>创建对象的深克隆。<br>使用<code>Object.assign()</code>和空对象<code>({})</code>创建原始的浅层克隆。<br>使用<code>Object.keys()</code>和<code>Array.prototype.forEach()</code>来确定需要深度克隆的键值对。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> deepClone = <span class="function"><span class="params">obj</span> =&gt;</span> {  <span class="keyword">let</span> clone = <span class="built_in">Object</span>.assign({}, obj);  <span class="built_in">Object</span>.keys(clone).forEach(    key =&gt; (clone[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span>     ? deepClone(obj[key])      : obj[key])  );  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(obj)   ? (clone.length = obj.length) &amp;&amp; <span class="built_in">Array</span>.from(clone)   : clone;};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> a = { <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">obj</span>: { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> } };<span class="keyword">const</span> b = deepClone(a); <span class="comment">// a !== b, a.obj !== b.obj</span></code></pre><p></p><h3 id="flattenObject"><a href="#flattenObject" class="headerlink" title="flattenObject"></a>flattenObject</h3><p>展平对象。<br>使用<code>Object.keys(obj)</code>与<code>Array.prototype.reduce()</code>结合将每个叶节点转换为展平路径节点。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> flattenObject = <span class="function">(<span class="params">obj, prefix = <span class="string">''</span></span>) =&gt;</span>  <span class="built_in">Object</span>.keys(obj).reduce(<span class="function">(<span class="params">acc, k</span>) =&gt;</span> {    <span class="keyword">const</span> pre = prefix.length ? prefix + <span class="string">'.'</span> : <span class="string">''</span>;    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[k] === <span class="string">'object'</span>) {    <span class="built_in">Object</span>.assign(acc, flattenObject(obj[k], pre + k))    };    <span class="keyword">else</span> acc[pre + k] = obj[k];    <span class="keyword">return</span> acc;  }, {});</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">flattenObject({ <span class="attr">a</span>: { <span class="attr">b</span>: { <span class="attr">c</span>: <span class="number">1</span> } }, <span class="attr">d</span>: <span class="number">1</span> }); <span class="comment">// { 'a.b.c': 1, d: 1 }</span></code></pre><p></p><h3 id="mapKeys"><a href="#mapKeys" class="headerlink" title="mapKeys"></a>mapKeys</h3><p>创建一个对象，其中包含通过为每个键运行提供的函数生成的键以及与提供的对象相同的值。<br>使用<code>Object.keys(obj)</code>迭代对象的键。<br>使用Array.prototype.reduce()使用<code>fn</code>创建具有相同值和映射键的新对象。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> mapKeys = <span class="function">(<span class="params">obj, fn</span>) =&gt;</span>  <span class="built_in">Object</span>.keys(obj).reduce(<span class="function">(<span class="params">acc, k</span>) =&gt;</span> {    acc[fn(obj[k], k, obj)] = obj[k];    <span class="keyword">return</span> acc;  }, {});</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">mapKeys({ <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> }, (val, key) =&gt; key + val); <span class="comment">// { a1: 1, b2: 2 }</span></code></pre><p></p><h3 id="mapValues"><a href="#mapValues" class="headerlink" title="mapValues"></a>mapValues</h3><p>使用与提供的对象相同的键创建对象，并通过为每个值运行提供的函数生成值。<br>使用<code>Object.keys(obj)</code>迭代对象的键。<br>使用<code>Array.prototype.reduce()</code>。<br>使用<code>fn</code>创建具有相同键和映射值的新对象。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> mapValues = <span class="function">(<span class="params">obj, fn</span>) =&gt;</span>  <span class="built_in">Object</span>.keys(obj).reduce(<span class="function">(<span class="params">acc, k</span>) =&gt;</span> {    acc[k] = fn(obj[k], k, obj);    <span class="keyword">return</span> acc;  }, {});</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> users = {  fred: { <span class="attr">user</span>: <span class="string">'fred'</span>, <span class="attr">age</span>: <span class="number">40</span> },  pebbles: { <span class="attr">user</span>: <span class="string">'pebbles'</span>, <span class="attr">age</span>: <span class="number">1</span> }};mapValues(users, u =&gt; u.age); <span class="comment">// { fred: 40, pebbles: 1 }</span></code></pre><p></p><h3 id="objectFromPairs"><a href="#objectFromPairs" class="headerlink" title="objectFromPairs"></a>objectFromPairs</h3><p>根据给定的键值对创建对象。<br>使用<code>Array.prototype.reduce()</code>创建对象。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> objectFromPairs = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, [key, val]</span>) =&gt;</span> ((a[key] = val), a), {});</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">objectFromPairs([[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'b'</span>, <span class="number">2</span>]]); <span class="comment">// {a: 1, b: 2}</span></code></pre><p></p><h3 id="objectToPairs"><a href="#objectToPairs" class="headerlink" title="objectToPairs"></a>objectToPairs</h3><p>从对象创建键值对数组的数组。<br>使用<code>Object.keys()</code>和<code>Array.prototype.map()</code>迭代对象的键并生成数组。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> objectToPairs = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.keys(obj).map(<span class="function"><span class="params">k</span> =&gt;</span> [k, obj[k]]);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">objectToPairs({ <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> }); <span class="comment">// [ ['a', 1], ['b', 2] ]</span></code></pre><p></p><h2 id="📜-String"><a href="#📜-String" class="headerlink" title="📜 String"></a>📜 String</h2><h3 id="fromCamelCase"><a href="#fromCamelCase" class="headerlink" title="fromCamelCase"></a>fromCamelCase</h3><p>转换字符串。<br>使用<code>String.prototype.replace()</code>删除下划线，连字符和空格，并将单词转换为<code>camelcase</code>。 省略第二个参数以使用<code>_</code>的默认分隔符。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> fromCamelCase = <span class="function">(<span class="params">str, separator = <span class="string">'_'</span></span>) =&gt;</span>  str    .replace(<span class="regexp">/([a-z\d])([A-Z])/g</span>, <span class="string">'$1'</span> + separator + <span class="string">'$2'</span>)    .replace(<span class="regexp">/([A-Z]+)([A-Z][a-z\d]+)/g</span>, <span class="string">'$1'</span> + separator + <span class="string">'$2'</span>)    .toLowerCase();</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">fromCamelCase(<span class="string">'someDatabaseFieldName'</span>, <span class="string">' '</span>); <span class="comment">// 'some database field name'</span>fromCamelCase(<span class="string">'someLabelThatNeedsToBeCamelized'</span>, <span class="string">'-'</span>); <span class="comment">// 'some-label-that-needs-to-be-camelized'</span>fromCamelCase(<span class="string">'someJavascriptProperty'</span>, <span class="string">'_'</span>); <span class="comment">// 'some_javascript_property'</span></code></pre><p></p><h3 id="isAnagram"><a href="#isAnagram" class="headerlink" title="isAnagram"></a>isAnagram</h3><p>检查字符串是否是另一个字符串的字谜。<br>使用<code>String.toLowerCase()</code>和<code>String.prototype.replace()</code>删除不必要的字符。<br>使用<code>String.prototype.split(‘’)</code>和<code>Array.prototype.sort()</code>和<code>Array.prototype.join(‘’)</code>检查是否相等。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> isAnagram = <span class="function">(<span class="params">str1, str2</span>) =&gt;</span> {  <span class="keyword">const</span> normalize = <span class="function"><span class="params">str</span> =&gt;</span>    str      .toLowerCase()      .replace(<span class="regexp">/[^a-z0-9]/gi</span>, <span class="string">''</span>)      .split(<span class="string">''</span>)      .sort()      .join(<span class="string">''</span>);  <span class="keyword">return</span> normalize(str1) === normalize(str2);};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">isAnagram(<span class="string">'iceman'</span>, <span class="string">'cinema'</span>); <span class="comment">// true</span></code></pre><p></p><h3 id="mask"><a href="#mask" class="headerlink" title="mask"></a>mask</h3><p>使用指定的掩码字符替换除最后一个字符数之外的所有字符。<br>使用<code>String.prototype.slice()</code>来获取将保持未屏蔽的字符部分。<br>使用<code>String.padStart()</code>以掩码字符填充字符串的开头，直到原始长度。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> mask = <span class="function">(<span class="params">cc, num = <span class="number">4</span>, mask = <span class="string">'*'</span></span>) =&gt;</span> <span class="string">`<span class="subst">${cc}</span>`</span>.slice(-num).padStart(<span class="string">`<span class="subst">${cc}</span>`</span>.length, mask);};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">mask(<span class="number">1234567890</span>); <span class="comment">// '******7890'</span>mask(<span class="number">1234567890</span>, <span class="number">3</span>); <span class="comment">// '*******890'</span>mask(<span class="number">1234567890</span>, <span class="number">-4</span>, <span class="string">'$'</span>); <span class="comment">// '$$$$567890'</span></code></pre><p></p><h3 id="reverseString"><a href="#reverseString" class="headerlink" title="reverseString"></a>reverseString</h3><p>反转字符串。<br>使用展开运算符<code>(…)</code>和Array.prototype.reverse()来反转字符串中字符的顺序。<br>使用<code>String.prototype.join(‘’)</code>转换成字符串。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> reverseString = <span class="function"><span class="params">str</span> =&gt;</span> [...str].reverse().join(<span class="string">''</span>);};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">reverseString(<span class="string">'foobar'</span>); <span class="comment">// 'raboof'</span></code></pre><p></p><h3 id="stripHTMLTags"><a href="#stripHTMLTags" class="headerlink" title="stripHTMLTags"></a>stripHTMLTags</h3><p>从字符串中删除<code>HTML / XML</code>标记。<br>使用正则表达式从字符串中删除<code>HTML / XML</code>标记。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> stripHTMLTags = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/&lt;[^&gt;]*&gt;/g</span>, <span class="string">''</span>);};</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">stripHTMLTags(<span class="string">'&lt;p&gt;&lt;em&gt;lorem&lt;/em&gt; &lt;em&gt;ipsum&lt;/em&gt;&lt;/p&gt;'</span>); <span class="comment">// 'lorem ipsum'</span></code></pre><p></p><h3 id="toKebabCase"><a href="#toKebabCase" class="headerlink" title="toKebabCase"></a>toKebabCase</h3><p>字符串转换为烤肉串案例。<br>将字符串分解为单词并将它们组合添加<code> - </code>使用正则表达式作为分隔符。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> toKebabCase = <span class="function"><span class="params">str</span> =&gt;</span>  str &amp;&amp;  str    .match(<span class="regexp">/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g</span>)    .map(<span class="function"><span class="params">x</span> =&gt;</span> x.toLowerCase())    .join(<span class="string">'-'</span>);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">toKebabCase(<span class="string">'camelCase'</span>); <span class="comment">// 'camel-case'</span>toKebabCase(<span class="string">'some text'</span>); <span class="comment">// 'some-text'</span>toKebabCase(<span class="string">'some-mixed_string With spaces_underscores-and-hyphens'</span>); <span class="comment">// 'some-mixed-string-with-spaces-underscores-and-hyphens'</span>toKebabCase(<span class="string">'AllThe-small Things'</span>); <span class="comment">// "all-the-small-things"</span>toKebabCase(<span class="string">'IAmListeningToFMWhileLoadingDifferentURLOnMyBrowser'</span>); <span class="comment">// "i-am-listening-to-fm-while-loading-different-url-on-my-browser"</span></code></pre><p></p><h3 id="words"><a href="#words" class="headerlink" title="words"></a>words</h3><p>将给定的字符串转换为单词数组。<br>使用<code>String.prototype.split()</code>与默认为非字母作为正则使用，以转换为字符串数组。<br>使用<code>Array.prototype.filter()</code>删除任何空字符串。 默认的正则为<code>/[^a-zA-Z-]+/</code>。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> words = <span class="function">(<span class="params">str, pattern = <span class="regexp">/[^a-zA-Z-]+/</span></span>) =&gt;</span> str.split(pattern).filter(<span class="built_in">Boolean</span>);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">words(<span class="string">'I love javaScript!!'</span>); <span class="comment">// ["I", "love", "javaScript"]</span>words(<span class="string">'python, javaScript &amp; coffee'</span>); <span class="comment">// ["python", "javaScript", "coffee"]</span></code></pre><p></p><h2 id="🔧-Utility"><a href="#🔧-Utility" class="headerlink" title="🔧 Utility"></a>🔧 Utility</h2><h3 id="RGBToHex"><a href="#RGBToHex" class="headerlink" title="RGBToHex"></a>RGBToHex</h3><p>将<code>RGB</code>值转换为颜色代码。<br>使用按位左移运算符<code>(&lt;&lt;)</code>和<code>toString(16)</code>。<br>使用<code>String.padStart(6，’0’)</code>将RGB参数转换为十六进制字符串，以获得6位十六进制值。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> RGBToHex = <span class="function">(<span class="params">r, g, b</span>) =&gt;</span>((r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).toString(<span class="number">16</span>).padStart(<span class="number">6</span>, <span class="string">'0'</span>);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">RGBToHex(<span class="number">255</span>, <span class="number">165</span>, <span class="number">1</span>); <span class="comment">// 'ffa501'</span></code></pre><p></p><h3 id="toDecimalMarkc"><a href="#toDecimalMarkc" class="headerlink" title="toDecimalMarkc"></a>toDecimalMarkc</h3><p>使用<code>toLocaleString()</code>将浮点运算转换为Decimal标记形式——使用逗号分隔字符串与数字。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> toDecimalMark = <span class="function"><span class="params">num</span> =&gt;</span> num.toLocaleString(<span class="string">'en-US'</span>);</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">toDecimalMark(<span class="number">12305030388.9087</span>); <span class="comment">// "12,305,030,388.909"</span></code></pre><p></p><h3 id="validateNumber"><a href="#validateNumber" class="headerlink" title="validateNumber"></a>validateNumber</h3><p>如果给定值是数字，则返回true，否则返回false。<br>使用<code>!isNaN()</code>与<code>parseFloat()</code>判断参数是否为数字。<br>使用<code>isFinite()</code>判断数字是否有限数字。<br>使用<code>Number()</code>判断类型是否为数字。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> validateNumber = <span class="function"><span class="params">n</span> =&gt;</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n) &amp;&amp; <span class="built_in">Number</span>(n) == n;</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">validateNumber(<span class="string">'10'</span>); <span class="comment">// true</span></code></pre><p></p><h3 id="yesNo"><a href="#yesNo" class="headerlink" title="yesNo"></a>yesNo</h3><p>如果字符串是<code>y / yes</code>则返回<code>true</code>，如果字符串是<code>n / no</code>，则返回<code>false</code>。<br>使用<code>RegExp.test()</code>检查字符串是否为<code>y / yes</code>或<code>n / no</code>。 <code>def</code>默认为no。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> yesNo = <span class="function">(<span class="params">val, def = <span class="literal">false</span></span>) =&gt;</span>  /^(y|yes)$/i.test(val) ? <span class="literal">true</span> : <span class="regexp">/^(n|no)$/i</span>.test(val) ? <span class="literal">false</span> : def;</code></pre><p></p><p>🌰栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">yesNo(<span class="string">'Y'</span>); <span class="comment">// true</span>yesNo(<span class="string">'yes'</span>); <span class="comment">// true</span>yesNo(<span class="string">'No'</span>); <span class="comment">// false</span>yesNo(<span class="string">'Foo'</span>, <span class="literal">true</span>); <span class="comment">// true</span></code></pre><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Gitgub上看见一个好玩的项目 &lt;a href=&quot;https://github.com/30-seconds/30-seconds-of-code#-adapter-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;30 seconds of code&lt;/a&gt;，js真好玩。&lt;br&gt;
    
    </summary>
    
      <category term="技能薄" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E8%96%84/"/>
    
    
      <category term="js" scheme="http://shamopoo.top/tags/js/"/>
    
      <category term="30secondsofcode" scheme="http://shamopoo.top/tags/30secondsofcode/"/>
    
  </entry>
  
  <entry>
    <title>React.js 小书</title>
    <link href="http://shamopoo.top/React-js-book/"/>
    <id>http://shamopoo.top/React-js-book/</id>
    <published>2018-12-20T02:20:48.000Z</published>
    <updated>2018-12-24T06:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近，在入坑react，从<a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">React.js 小书</a>开始入门。</p><a id="more"></a><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><a href="http://jiushi38.coding.me/react-book/" target="_blank" rel="noopener">预览</a><br><a href="https://github.com/shamopoo/Notes/tree/master/react-book" target="_blank" rel="noopener">源码</a></p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</code></pre><p></p><p>这种写法是不是很奇怪？包含着HTML和JavaScript。</p><p>它被称为JSX，一种 JavaScript 的语法扩展，是React 的核心组成部分。</p><p>在React 中，JSX会被编译成普通的 JavaScript 对象。举个栗子：</p><p><samp></samp></p><pre><code class="HTML"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'list'</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></code></pre><p></p><p>每个 DOM 元素的结构都可以用 JavaScript 的对象来表示。你会发现一个 DOM 元素包含的信息其实只有三个：标签名，属性，子元素。</p><p>所以其实上面这个 HTML 所有的信息我们都可以用合法的 JavaScript 对象来表示：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">{  tag: <span class="string">'ul'</span>,  attrs: { <span class="attr">className</span>: <span class="literal">null</span>, <span class="attr">id</span>: <span class="string">'list'</span>},  children: [    {      tag: <span class="string">'li'</span>,      arrts: { <span class="attr">className</span>: <span class="string">'item'</span> }    },     {      tag: <span class="string">'li'</span>,      arrts: { <span class="attr">className</span>: <span class="string">'item'</span> }    },     {      tag: <span class="string">'li'</span>,      arrts: { <span class="attr">className</span>: <span class="string">'item'</span> }    }  ]}</code></pre><p></p><p>React利用render将JavaScript对象转化成DOM。主要代码如下：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">Element.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{    <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="keyword">this</span>.tagName) <span class="comment">// 根据tagName构建</span>  <span class="keyword">var</span> props = <span class="keyword">this</span>.props  <span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> props) { <span class="comment">// 设置节点的DOM属性</span>    <span class="keyword">var</span> propValue = props[propName]    el.setAttribute(propName, propValue)  }  <span class="keyword">var</span> children = <span class="keyword">this</span>.children || []  children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>{    <span class="keyword">var</span> childEl = (child <span class="keyword">instanceof</span> Element)      ? child.render() <span class="comment">// 如果子节点也是虚拟DOM，递归构建DOM节点</span>      : <span class="built_in">document</span>.createTextNode(child) <span class="comment">// 如果字符串，只构建文本节点</span>    el.appendChild(childEl)  })  <span class="keyword">return</span> el}</code></pre><p></p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="comment">// JSX编译过程 =&gt; [过程] =&gt;</span>JSX =&gt; Babel 编译 React.js =&gt;  JavaScript对象结构 =&gt; ReactDom.render =&gt; DOM元素 =&gt; 插入页面</code></pre><p></p><h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><p>React.js 的 state 就是用来存储这种可变化的状态的。如果要想改变某个状态呢？那就<br>需要setState。</p><p>setState 方法由父类 Component 所提供。setState 接受<code>对象参数 </code>和  <code>函数参数</code>。<code>当我们调用这个函数的时候，React.js 会更新组件的状态 state ，并且重新调用 render 方法，然后再把 render 方法所渲染的最新的内容显示到页面上。</code></p><blockquote class="pullquote warning"><p>注意：<br>当你调用 setState 的时候，React.js 并不会马上修改 state。</p></blockquote><p>调用 setState 的时候，是把这个对象放到一个更新队列里面，稍后才会从队列当中把新的状态提取出来合并到 state 当中，然后再触发组件更新。举个栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>{    <span class="keyword">constructor</span> () {        <span class="keyword">super</span>()        <span class="keyword">this</span>.state = { <span class="attr">isLiked</span>: <span class="literal">false</span> }    }    handleClickOnLikeButton () {        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.isLiked) <span class="comment">// false</span>        <span class="keyword">this</span>.setState({            isLiked: !<span class="keyword">this</span>.state.isLiked        })        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.isLiked) <span class="comment">// false</span>    }    render() {        <span class="keyword">return</span>(            &lt;button onClick={<span class="keyword">this</span>.handleClickOnLikeButton.bind(<span class="keyword">this</span>)&gt;                  {<span class="keyword">this</span>.state.isLiked ? <span class="string">'取消'</span> : <span class="string">'点赞'</span>}             &lt;<span class="regexp">/botton&gt;</span><span class="regexp">        )</span><span class="regexp">    }</span><span class="regexp">}</span></code></pre><p></p><blockquote class="pullquote tip"><p>Tip:<br>在使用 React.js 的时候，并不需要担心多次进行 setState 会带来性能问题。//  ✅ </p></blockquote><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p> React.js 内部对待每个组件都有一个过程，也就是初始化组件 -&gt; 挂载到页面上的过程。</p><p><samp></samp></p><pre><code class="JAVASCRIPT">-&gt; <span class="keyword">constructor</span>()-&gt; componentWillMount()-&gt; render()// 然后构造 DOM 元素插入页面-&gt; componentDidMount()</code></pre><p></p><p>那么挂载的时候，执行顺序是怎样的呢？请看下面这个栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>{  <span class="keyword">constructor</span> () {    <span class="keyword">super</span>()    <span class="built_in">console</span>.log(<span class="string">'construct'</span>)  }  componentWillMount () {    <span class="built_in">console</span>.log(<span class="string">'component will mount'</span>)  }  componentDidMount () {    <span class="built_in">console</span>.log(<span class="string">'component did mount'</span>)  }  render () {    <span class="built_in">console</span>.log(<span class="string">'render'</span>)    <span class="keyword">return</span> (      &lt;div&gt;        &lt;h1 className=<span class="string">'title'</span>&gt;React 小书&lt;<span class="regexp">/h1&gt;</span><span class="regexp">      &lt;/</span>div&gt;    )  }}</code></pre><p></p><p>在控制台可以看到依次输出：<br><samp></samp></p><pre><code class="JAVASCRIPT">constructcomponent will mountrendercomponent did mount</code></pre><p></p><blockquote class="pullquote tip"><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>componentWillMount：组件挂载开始之前，也就是在组件调用 render 方法之前调用。<br>componentDidMount：组件挂载完成以后，也就是 DOM 元素已经插入页面后调用。<br>componentWillUnmount：组件对应的 DOM 元素从页面中删除之前调用。<br>componentWillUnmount：组件对应的 DOM 元素从页面中删除之前调用。<br>componentWillUnmount: 组件销毁调用。</p><h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h3><p>shouldComponentUpdate(nextProps, nextState)：你可以通过这个方法控制组件是否重新渲染。如果返回 false 组件就不会重新渲染。这个生命周期在 React.js 性能优化上非常有用。<br>componentWillReceiveProps(nextProps)：组件从父组件接收到新的 props 之前调用。<br>componentWillUpdate()：组件开始重新渲染之前调用。<br>componentDidUpdate()：组件重新渲染并且把更改变更到真实的 DOM 以后调用。</p></blockquote><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>To be continued…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近，在入坑react，从&lt;a href=&quot;http://huziketang.mangojuice.top/books/react/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React.js 小书&lt;/a&gt;开始入门。&lt;/p&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="React" scheme="http://shamopoo.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>我的2018总结</title>
    <link href="http://shamopoo.top/summary-of-2018/"/>
    <id>http://shamopoo.top/summary-of-2018/</id>
    <published>2018-12-19T02:18:34.000Z</published>
    <updated>2018-12-20T07:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例，是时候写年度总结了。回想起来，时间如白驹过隙，从大四到工作，从学校正式步入社会，特此记录一下。<br><a id="more"></a></p><h2 id="毕业快乐"><a href="#毕业快乐" class="headerlink" title="毕业快乐"></a>毕业快乐</h2><p>上半年主要是毕业。为了毕业答辩，费了不少脑子。对论文绞尽脑汁，还请求女朋友帮忙，毕竟毕业要紧。<br>四月份，辞职回南昌参加学校答辩，那时想，等我回来，从头再来。<br>五月份，在宿舍白天搞博客，晚上搞论文。可以说，很好耍。五月底，答辩结束。第二天我坐飞机来到了重庆，见到了她。<br>答辩告一段落了，终于毕业了，毕业快乐。</p><h2 id="上班，下班，买菜，做饭，最后洗碗。"><a href="#上班，下班，买菜，做饭，最后洗碗。" class="headerlink" title="上班，下班，买菜，做饭，最后洗碗。"></a>上班，下班，买菜，做饭，最后洗碗。</h2><p>六月份，在学校接到了一个应聘前端电话，然后我去面试了，面试成功，办理入职，后来因为项目周期短，压力大，加班文化，我辞职了。<br>八月份，来到了我司，无加班文化，mbp办公，下午茶，易相处的同事们。<br>九月份，买了Kindle，可以在轻轨上看书，最重要的是，我们有猫了，它的名字叫<a href="https://twitter.com/shamopooo" target="_blank" rel="noopener">九十</a>，和我的花名一样，九十是只橘猫，九十小时候生了一场病，打了两天的点滴，弱小无助，但如今已经有五斤了，果然大橘为重。<br>十月份，和女朋友去见了她家长，明年过年一定带回去。十月五号，女朋友的生日。在家里度过了一个开心难忘的生日。生日礼物送了oppo find x，颜值高，和她一样。<br>十一月份，双十一剁手买了Akko键盘，iPad2018，小米闹钟。 女朋友买了个粉色的键盘，少女心。<br>十二月份，带九十去打疫苗，九十出去还是有点怕生。第二针，背猫背包带九十去，第三针，在月底。</p><h2 id="念念不忘，必有回响。"><a href="#念念不忘，必有回响。" class="headerlink" title="念念不忘，必有回响。"></a>念念不忘，必有回响。</h2><p>2019， <a href="https://blog.shamopoo.top/about" target="_blank" rel="noopener">计划清单</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例，是时候写年度总结了。回想起来，时间如白驹过隙，从大四到工作，从学校正式步入社会，特此记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="日常簿" scheme="http://shamopoo.top/categories/%E6%97%A5%E5%B8%B8%E7%B0%BF/"/>
    
    
      <category term="日常" scheme="http://shamopoo.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="2018" scheme="http://shamopoo.top/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>原型链:prototype和__proto__区别</title>
    <link href="http://shamopoo.top/prototype/"/>
    <id>http://shamopoo.top/prototype/</id>
    <published>2018-12-17T07:24:31.000Z</published>
    <updated>2018-12-21T03:46:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在wx交流群看到了一个关于原型链的题目，引起了我对原型链探索的兴趣。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="built_in">Object</span>.prototype.a = <span class="string">'a'</span><span class="built_in">Function</span>.prototype.a = <span class="string">'b'</span><span class="function"><span class="keyword">function</span> <span class="title">person</span> (<span class="params"></span>) </span>{}<span class="keyword">var</span> peter = <span class="keyword">new</span> person()peter.a  <span class="comment">// 😳 a or b</span></code></pre><p></p><a id="more"></a><p>当时，我的理解如下：<br><samp></samp></p><pre><code class="JAVASCRIPT">peter  =&gt;  <span class="function"><span class="params">__proto__</span>  =&gt;</span>  pesron.prototype  =&gt; <span class="function"><span class="params">__proto__</span> =&gt;</span> <span class="built_in">Object</span>.prototypeperson  =&gt;  <span class="function"><span class="params">__proto__</span>  =&gt;</span>  <span class="built_in">Function</span>.prototype  =&gt; <span class="function"><span class="params">__proto__</span> =&gt;</span> <span class="built_in">Object</span>.prototype</code></pre><p></p><p>问题来了，proto是什么东西？</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">在javascript的世界里，一切皆为对象。每个实例对象（object ）都有一个私有属性（称之为<strong>proto</strong>）指向它的原型对象（prototype)。该原型对象也有一个自己的原型对象(<strong>proto</strong>) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</a></p><p>可以说，区别就是原型链是靠<code>——proto——</code>来链接的,共同点都是用来实现基于原型的继承。</p><p>那么，下面的代码是为true:</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="comment">// Object.creat() 除外</span> obj.__proto__ === obj.constructor.prototype <span class="comment">// true</span></code></pre><p></p><h3 id="趁热打铁"><a href="#趁热打铁" class="headerlink" title="趁热打铁"></a>趁热打铁</h3><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="built_in">Function</span>.__proto__ == <span class="built_in">Function</span>.prototype <span class="comment">// true</span><span class="built_in">Object</span>.__proto__ == <span class="built_in">Object</span>.prototype <span class="comment">// false</span><span class="built_in">Object</span>.__proto__ == <span class="built_in">Function</span>.prototype <span class="comment">// true</span><span class="built_in">Function</span>.prototype.__proto__ == <span class="built_in">Object</span>.prototype <span class="comment">// true</span><span class="built_in">Object</span>.__proto__.__proto__ === <span class="built_in">Object</span>.prototype.constructor.prototype <span class="comment">// true</span><span class="built_in">Object</span>.__proto__.prototype <span class="comment">// undefined</span><span class="built_in">Function</span>.prototype.__proto__ == <span class="built_in">Object</span>.prototype <span class="comment">// true</span></code></pre><p></p><p>这时候，肯定会有点晕+_+，那祭出<a href="https://moetu.fastmirror.org/images/2018/12/20/utf-8-FsA8_UozPiTrwf-G_TE8cR1-ktlj537435246c961e2c.jpg" target="_blank" rel="noopener">原型链神图</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原型链到Object.prototype.——proto—— 结束，指向null。</p><p>Object.create()创建的对象没有继承Object.prototype。</p><p>原型链是靠——proto——来链接的，——proto——属性（原型）等于其构造函数的prototype<br>属性。</p><p>——proto——和prototype都是用来实现基于原型的继承。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在wx交流群看到了一个关于原型链的题目，引起了我对原型链探索的兴趣。&lt;/p&gt;
&lt;p&gt;&lt;samp&gt;&lt;/samp&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;JAVASCRIPT&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.a = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype.a = &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;person&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; peter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; person()
peter.a  &lt;span class=&quot;comment&quot;&gt;// 😳 a or b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="原型链" scheme="http://shamopoo.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>毕业快乐！</title>
    <link href="http://shamopoo.top/graduate/"/>
    <id>http://shamopoo.top/graduate/</id>
    <published>2018-07-04T02:15:22.000Z</published>
    <updated>2018-12-19T03:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>那一天， 我毕业了 !<br><a id="more"></a></p><p><div class="graduate-time" id="graduate-time"></div></p><script>  (function() {    var show = document.getElementById("graduate-time");    setInterval(function() {    var BirthDay = new Date('2018-07-04');    var today = new Date();    var timeold = (today.getTime() - BirthDay.getTime());    var msPerDay = 24 * 60 * 60 * 1000 * 365;    var e_yearsold = timeold / msPerDay;    var yearsold = Math.floor(e_yearsold);    var e_daysold = (e_yearsold - yearsold) * 365;    var daysold = Math.floor(e_daysold);    var e_hrsold = (e_daysold - daysold) * 24;    var hrsold = Math.floor(e_hrsold);    var e_minsold = (e_hrsold - hrsold) * 60;    var minsold = Math.floor((e_hrsold - hrsold) * 60);    var seconds = Math.floor((e_minsold - minsold) * 60);    var t = '毕业'     + (yearsold + '').padStart(2, '0') + "年"     + (daysold + '').padStart(3, '0') + "天"     + (hrsold + '').padStart(2, '0') + "小时"     + (minsold + '').padStart(2, '0')  + "分"     + (seconds + '').padStart(2, '0') + "秒"    show.innerHTML = t;    }, 1000)}());</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那一天， 我毕业了 !&lt;br&gt;
    
    </summary>
    
      <category term="日常簿" scheme="http://shamopoo.top/categories/%E6%97%A5%E5%B8%B8%E7%B0%BF/"/>
    
    
      <category term="毕业" scheme="http://shamopoo.top/tags/%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://shamopoo.top/git-command/"/>
    <id>http://shamopoo.top/git-command/</id>
    <published>2018-06-09T11:12:15.000Z</published>
    <updated>2018-12-20T07:26:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>进入新公司，要求使用git多人协同开发，记录一下git常用命令。<br><a id="more"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-配置用户信息"><a href="#1-配置用户信息" class="headerlink" title="1.  配置用户信息"></a>1.  配置用户信息</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户信息</span></span><br><span class="line">$ git config --global user.name “your name”</span><br><span class="line">$ git config --global user.email “your email”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户信息</span></span><br><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure></div><h3 id="2-本地生成SSH私钥和公钥"><a href="#2-本地生成SSH私钥和公钥" class="headerlink" title="2. 本地生成SSH私钥和公钥"></a>2. 本地生成SSH私钥和公钥</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否存在SSH</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/. ssh</span><br><span class="line"><span class="comment"># 不存在生成，进行下步</span></span><br><span class="line"><span class="comment"># 生成本地SSH私钥和公钥</span></span><br><span class="line">$ ssh-keygen -t rsa -C “your name”</span><br></pre></td></tr></table></figure></div><p> 这样在用户下的C:\Users\Administrator..ssh目录里就可以创建id_rsa和id_rsa.pub这两个文件。<br> 把id_ras.pub文件的内容复制到coding.net个人账户的SSH公钥中。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.  下载"></a>1.  下载</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆</span></span><br><span class="line">$ git <span class="built_in">clone</span> 仓库的SSH地址</span><br></pre></td></tr></table></figure></div><h3 id="2-关联"><a href="#2-关联" class="headerlink" title="2.  关联"></a>2.  关联</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地仓库关联远程仓库</span></span><br><span class="line">$ git remote add origin 远程仓库地址</span><br><span class="line"><span class="comment"># 测试是否关联成功</span></span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure></div><h3 id="3-推送"><a href="#3-推送" class="headerlink" title="3.  推送"></a>3.  推送</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库更新到本地</span></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment"># 查看文件状态</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># 部分文件添加到暂存区</span></span><br><span class="line">$ git  add  [file1] [file2]</span><br><span class="line"><span class="comment"># 当前目录所有文件添加到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 再次查看文件状态(添加的变为绿色)</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># 提交暂存区到仓库，并添加必要注释</span></span><br><span class="line">$ git commit -m ‘必要的注释’</span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure></div><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地所有分支</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 列出远程所有分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"><span class="comment"># 新建一个分支</span></span><br><span class="line">$ git branch  [branch-name]</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure></div><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时对多个文件执行了git add,但本次只想提交其中一部分文件</span></span><br><span class="line">$ git reset HEAD [filename]</span><br><span class="line"><span class="comment"># 文件执行了git add,但想撤销对其的修改</span></span><br><span class="line">$ git reset HEAD [filename]</span><br><span class="line">$ git checkout [filename]</span><br></pre></td></tr></table></figure></div><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销指定文件到指定版本</span></span><br><span class="line">$ git <span class="built_in">log</span> [filename]</span><br><span class="line">$ git checkout [commitID] [filename]</span><br><span class="line"><span class="comment"># 回滚到某次提交</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">$ git revert [commitID]</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进入新公司，要求使用git多人协同开发，记录一下git常用命令。&lt;br&gt;
    
    </summary>
    
      <category term="技能薄" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E8%96%84/"/>
    
    
      <category term="git" scheme="http://shamopoo.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo置顶文章及样式美化</title>
    <link href="http://shamopoo.top/hexo-top/"/>
    <id>http://shamopoo.top/hexo-top/</id>
    <published>2018-05-14T09:51:12.000Z</published>
    <updated>2018-12-19T03:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>文章置顶功能实现, top值越高越在前。由于官方并未给出置顶功能, 所以要手动修改。<br><blockquote class="pullquote tip"><p>sticky: 显示图钉样式<br>top: 置顶功能实现</p></blockquote></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在Hexo生成首页HTML时， top值越高越在前，达到文章置顶功能。</p><a id="more"></a><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>找到<code>node_modules\hexo-generator-index\lib\generator.js</code>文件。替换如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>找到<code>themes\主题\layout_macro\post.swig</code>文件。在<code>POST BLOCK</code>添加如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"set-top"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>找到<code>themes\主题\source\css_custom\custom.styl</code>文件。添加如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*置顶*/</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:first-of-type)</span> <span class="selector-class">.post-block</span> <span class="selector-class">.set-top</span> <span class="selector-tag">div</span>&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:last-of-type</span> <span class="selector-class">.post-block</span> <span class="selector-class">.set-top</span> <span class="selector-tag">div</span>&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-of-type</span> <span class="selector-class">.post-block</span> <span class="selector-class">.set-top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-of-type</span> <span class="selector-class">.post-block</span> <span class="selector-class">.set-top</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">113px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0bf</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: -<span class="number">3px</span> <span class="number">5px</span> <span class="number">6px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.5);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left , rgba(48,182,209,0.99),<span class="built_in">rgba</span>(43,70,191,0.99) <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-of-type</span> <span class="selector-class">.set-top</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="number">#31a4ce</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">4px</span> solid <span class="number">#31a4ce</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-of-type</span> <span class="selector-class">.set-top</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">4px</span> solid <span class="number">#2f5ec3</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">4px</span> solid <span class="number">#2f5ec3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: hexo置顶文章及样式美化</span><br><span class="line">date: 2018-05-14 17:51:12</span><br><span class="line">tags: - hexo</span><br><span class="line">categories: - 技能簿</span><br><span class="line">top: 100</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;文章置顶功能实现, top值越高越在前。由于官方并未给出置顶功能, 所以要手动修改。&lt;br&gt;&lt;blockquote class=&quot;pullquote tip&quot;&gt;&lt;p&gt;sticky: 显示图钉样式&lt;br&gt;top: 置顶功能实现&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;在Hexo生成首页HTML时， top值越高越在前，达到文章置顶功能。&lt;/p&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="hexo" scheme="http://shamopoo.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>VuePress搭建个人博客</title>
    <link href="http://shamopoo.top/VuePress/"/>
    <id>http://shamopoo.top/VuePress/</id>
    <published>2018-05-11T12:23:46.000Z</published>
    <updated>2018-12-19T03:30:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>借助<a href="https://vuepress.docschina.org/" target="_blank" rel="noopener">VuePress</a>文档用VuePress + github搭建博客, 初试VuePress。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>VuePress 网站实际上是由 Vue, Vue Router 和 webpack 驱动的单页面应用程序。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote class="pullquote warning"><p>兼容性注意事项<br>VuePress 要求 Node.js &gt;= 8。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g vuepress</span><br></pre></td></tr></table></figure></div><h2 id="克隆VuePress"><a href="#克隆VuePress" class="headerlink" title="克隆VuePress"></a>克隆VuePress</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:docschina/vuepress.git</span><br></pre></td></tr></table></figure></div><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> VuePress</span><br><span class="line">$ <span class="built_in">cd</span> docs</span><br><span class="line">$ vuepress dev</span><br></pre></td></tr></table></figure></div><blockquote class="pullquote tip"><p>VuePress dev server listening at <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br>出现上述提示，运行成功</p></blockquote><p>打开<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>查看效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;借助&lt;a href=&quot;https://vuepress.docschina.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VuePress&lt;/a&gt;文档用VuePress + github搭建博客, 初试VuePress。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;VuePress 网站实际上是由 Vue, Vue Router 和 webpack 驱动的单页面应用程序。&lt;/p&gt;
&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;blockquote class=&quot;pullquote warning&quot;&gt;&lt;p&gt;兼容性注意事项&lt;br&gt;VuePress 要求 Node.js &amp;gt;= 8。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="VuePress" scheme="http://shamopoo.top/tags/VuePress/"/>
    
  </entry>
  
  <entry>
    <title>「 付费后可查看 」</title>
    <link href="http://shamopoo.top/daily/"/>
    <id>http://shamopoo.top/daily/</id>
    <published>2018-05-10T07:27:18.000Z</published>
    <updated>2018-12-19T03:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入金额</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      支付成功可浏览
    
    </summary>
    
      <category term="日常簿" scheme="http://shamopoo.top/categories/%E6%97%A5%E5%B8%B8%E7%B0%BF/"/>
    
    
      <category term="日常" scheme="http://shamopoo.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>一台电脑上用多个git账户更新多个hexo博客</title>
    <link href="http://shamopoo.top/hexo-git/"/>
    <id>http://shamopoo.top/hexo-git/</id>
    <published>2018-05-05T07:00:58.000Z</published>
    <updated>2018-12-20T07:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>有时候我们一台电脑要更新两个甚至多个hexo博客, 而电脑默认保存一个git私钥/公钥。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>生成多个不同的私钥/公钥, 分别 hexo g 到多个的git账户，从而实现更新多个hexo博客。<br><a id="more"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.查看是否存在SSH密钥<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></div></p><p>如果有 id_rsa 和 id_rsa.pub，说明已存在一对密钥/公钥。</p><p>2.创建新的 私钥/公钥, 并指定秘钥名称, 如 id_rsa_second</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f  ~/.ssh/id_rsa_second -C <span class="string">"yourmail@xxx.com"</span></span><br></pre></td></tr></table></figure></div><p>完成后, 该目录下会多出 id_rsa_second 和 id_rsa_second.pub 两个文件</p><p>3.在 ~/.ssh 目录下创建一个名为 config 文件</p><p>将以下内容添加到 config 文件中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个账号，默认使用的账号</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"><span class="comment"># 第二个账号</span></span><br><span class="line">Host second.github.com  <span class="comment"># second为前缀名，可以任意设置</span></span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure></div><blockquote class="pullquote tip"><p>原理分析<br>1.ssh 客户端是通过类似 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:githubUserName/repName.git 的地址来识别使用本地的哪个私钥的，<br>地址中的 User 是@前面的git， Host 是@后面的github.com。<br>2.如果所有账号的 User 和 Host 都为 git 和 github.com，那么就只能使用一个私钥。<br>所以要对User 和 Host 进行配置，让每个账号使用自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，<br>如上面配置中的Host second.github.com。<br>3.配置了别名之后，新的地址就是<a href="mailto:git@second.github.com" target="_blank" rel="noopener">git@second.github.com</a>:githubUserName/repName.git。<br>这样 ssh 在连接时就可以区别不同的账号了。</p></blockquote><p>4.查看 SSH 密钥的值，分别添加到对应的 GitHub 账户中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br><span class="line">$ cat id_rsa_second.pub</span><br></pre></td></tr></table></figure></div><p>5.清空本地的 SSH 缓存，添加新的 SSH 密钥 到 SSH agent中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -D</span><br><span class="line">$ ssh-add id_rsa</span><br><span class="line">$ ssh-add id_rsa_second</span><br></pre></td></tr></table></figure></div><p>最后确认一下新秘钥已经添加成功</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span><br></pre></td></tr></table></figure></div><p>6.测试 ssh 链接</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@second.github.com</span><br></pre></td></tr></table></figure></div><blockquote class="pullquote tip"><p>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.<br>出现上述提示，连接成功</p></blockquote><p>7.进入项目文件夹，单独设置用户名/邮箱</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消全局 用户名/邮箱 配置</span></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line"><span class="comment"># 进入项目文件夹，单独设置每个repo 用户名/邮箱</span></span><br><span class="line">$ git config user.email <span class="string">"xxxx@xx.com"</span></span><br><span class="line">$ git config user.name <span class="string">"xxxx"</span></span><br></pre></td></tr></table></figure></div><p>查看设置是否成功</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></div><p>8.最后在 hexo 配置文件修改git地址</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@second.github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div><p>配置多个git账户重复以上步骤。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://e-e.iteye.com/blog/2359320" target="_blank" rel="noopener">一台电脑上用多个git账户</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;有时候我们一台电脑要更新两个甚至多个hexo博客, 而电脑默认保存一个git私钥/公钥。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;生成多个不同的私钥/公钥, 分别 hexo g 到多个的git账户，从而实现更新多个hexo博客。&lt;br&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="git" scheme="http://shamopoo.top/tags/git/"/>
    
      <category term="hexo" scheme="http://shamopoo.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>路飞赏金飙至15亿，荣登五皇宝座，即将赶超白胡子！</title>
    <link href="http://shamopoo.top/lufuy/"/>
    <id>http://shamopoo.top/lufuy/</id>
    <published>2018-04-28T13:02:00.000Z</published>
    <updated>2018-12-19T03:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" data-id="28211151" data-server="netease" data-type="song" data-mode="single"></div><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;aplayer&quot; data-id=&quot;28211151&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;single&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="动漫簿" scheme="http://shamopoo.top/categories/%E5%8A%A8%E6%BC%AB%E7%B0%BF/"/>
    
    
      <category term="路飞" scheme="http://shamopoo.top/tags/%E8%B7%AF%E9%A3%9E/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://shamopoo.top/hello-world/"/>
    <id>http://shamopoo.top/hello-world/</id>
    <published>2018-03-16T13:53:00.000Z</published>
    <updated>2018-12-03T07:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="事件簿" scheme="http://shamopoo.top/categories/%E4%BA%8B%E4%BB%B6%E7%B0%BF/"/>
    
    
      <category term="前端" scheme="http://shamopoo.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="http://shamopoo.top/tags/hexo/"/>
    
  </entry>
  
</feed>
