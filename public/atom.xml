<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>九十 | shamopoo&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shamopoo.top/"/>
  <updated>2018-12-21T03:55:27.000Z</updated>
  <id>http://shamopoo.top/</id>
  
  <author>
    <name>shamopoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>30 seconds of code</title>
    <link href="http://shamopoo.top/30-seconds-of-js/"/>
    <id>http://shamopoo.top/30-seconds-of-js/</id>
    <published>2018-12-21T03:44:39.000Z</published>
    <updated>2018-12-21T03:55:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Gitgub上看见一个好玩的<a href="https://github.com/30-seconds/30-seconds-of-code#-adapter-1" target="_blank" rel="noopener">30 seconds of code</a>，js真好玩。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Gitgub上看见一个好玩的&lt;a href=&quot;https://github.com/30-seconds/30-seconds-of-code#-adapter-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;30 seconds of code&lt;/a&gt;，js真好玩。&lt;br&gt;
    
    </summary>
    
      <category term="技能薄" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E8%96%84/"/>
    
    
      <category term="js" scheme="http://shamopoo.top/tags/js/"/>
    
      <category term="30secondsofcode" scheme="http://shamopoo.top/tags/30secondsofcode/"/>
    
  </entry>
  
  <entry>
    <title>React.js 小书</title>
    <link href="http://shamopoo.top/React-js-book/"/>
    <id>http://shamopoo.top/React-js-book/</id>
    <published>2018-12-20T02:20:48.000Z</published>
    <updated>2018-12-21T03:46:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近，在入门react，从<a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">React.js 小书</a>开始入坑。</p><a id="more"></a><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><a href="http://jiushi38.coding.me/react-book/" target="_blank" rel="noopener">预览</a><br><a href="https://github.com/shamopoo/Notes/tree/master/react-book" target="_blank" rel="noopener">源码</a></p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</code></pre><p></p><p>这种写法是不是很奇怪？包含着HTML和JavaScript。</p><p>它被称为JSX，一种 JavaScript 的语法扩展，是React 的核心组成部分。</p><p>在React 中，JSX会被编译成普通的 JavaScript 对象。举个栗子：</p><p><samp></samp></p><pre><code class="HTML"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'list'</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></code></pre><p></p><p>每个 DOM 元素的结构都可以用 JavaScript 的对象来表示。你会发现一个 DOM 元素包含的信息其实只有三个：标签名，属性，子元素。</p><p>所以其实上面这个 HTML 所有的信息我们都可以用合法的 JavaScript 对象来表示：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">{  tag: <span class="string">'ul'</span>,  attrs: { <span class="attr">className</span>: <span class="literal">null</span>, <span class="attr">id</span>: <span class="string">'list'</span>},  children: [    {      tag: <span class="string">'li'</span>,      arrts: { <span class="attr">className</span>: <span class="string">'item'</span> }    },     {      tag: <span class="string">'li'</span>,      arrts: { <span class="attr">className</span>: <span class="string">'item'</span> }    },     {      tag: <span class="string">'li'</span>,      arrts: { <span class="attr">className</span>: <span class="string">'item'</span> }    }  ]}</code></pre><p></p><p>React利用render将JavaScript对象转化成DOM。主要代码如下：</p><p><samp></samp></p><pre><code class="JAVASCRIPT">Element.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{    <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="keyword">this</span>.tagName) <span class="comment">// 根据tagName构建</span>  <span class="keyword">var</span> props = <span class="keyword">this</span>.props  <span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> props) { <span class="comment">// 设置节点的DOM属性</span>    <span class="keyword">var</span> propValue = props[propName]    el.setAttribute(propName, propValue)  }  <span class="keyword">var</span> children = <span class="keyword">this</span>.children || []  children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>{    <span class="keyword">var</span> childEl = (child <span class="keyword">instanceof</span> Element)      ? child.render() <span class="comment">// 如果子节点也是虚拟DOM，递归构建DOM节点</span>      : <span class="built_in">document</span>.createTextNode(child) <span class="comment">// 如果字符串，只构建文本节点</span>    el.appendChild(childEl)  })  <span class="keyword">return</span> el}</code></pre><p></p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="comment">// JSX编译过程 =&gt; [过程] =&gt;</span>JSX =&gt; Babel 编译 React.js =&gt;  JavaScript对象结构 =&gt; ReactDom.render =&gt; DOM元素 =&gt; 插入页面</code></pre><p></p><h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><p>React.js 的 state 就是用来存储这种可变化的状态的。如果要想改变某个状态呢？那就<br>需要setState。</p><p>setState 方法由父类 Component 所提供。setState 接受<code>对象参数 </code>和  <code>函数参数</code>。<code>当我们调用这个函数的时候，React.js 会更新组件的状态 state ，并且重新调用 render 方法，然后再把 render 方法所渲染的最新的内容显示到页面上。</code></p><blockquote class="pullquote warning"><p>注意：<br>当你调用 setState 的时候，React.js 并不会马上修改 state。</p></blockquote><p>调用 setState 的时候，是把这个对象放到一个更新队列里面，稍后才会从队列当中把新的状态提取出来合并到 state 当中，然后再触发组件更新。举个栗子：</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>{    <span class="keyword">constructor</span> () {        <span class="keyword">super</span>()        <span class="keyword">this</span>.state = { <span class="attr">isLiked</span>: <span class="literal">false</span> }    }    handleClickOnLikeButton () {        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.isLiked) <span class="comment">// false</span>        <span class="keyword">this</span>.setState({            isLiked: !<span class="keyword">this</span>.state.isLiked        })        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.isLiked) <span class="comment">// false</span>    }    render() {        <span class="keyword">return</span>(            &lt;button onClick={<span class="keyword">this</span>.handleClickOnLikeButton.bind(<span class="keyword">this</span>)&gt;                  {<span class="keyword">this</span>.state.isLiked ? <span class="string">'取消'</span> : <span class="string">'点赞'</span>}             &lt;<span class="regexp">/botton&gt;</span><span class="regexp">        )</span><span class="regexp">    }</span><span class="regexp">}</span></code></pre><p></p><blockquote class="pullquote tip"><p>Tip:<br>在使用 React.js 的时候，并不需要担心多次进行 setState 会带来性能问题。//  ✅ </p></blockquote><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近，在入门react，从&lt;a href=&quot;http://huziketang.mangojuice.top/books/react/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React.js 小书&lt;/a&gt;开始入坑。&lt;/p&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="React" scheme="http://shamopoo.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>我的2018总结</title>
    <link href="http://shamopoo.top/summary-of-2018/"/>
    <id>http://shamopoo.top/summary-of-2018/</id>
    <published>2018-12-19T02:18:34.000Z</published>
    <updated>2018-12-20T07:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例，是时候写年度总结了。回想起来，时间如白驹过隙，从大四到工作，从学校正式步入社会，特此记录一下。<br><a id="more"></a></p><h2 id="毕业快乐"><a href="#毕业快乐" class="headerlink" title="毕业快乐"></a>毕业快乐</h2><p>上半年主要是毕业。为了毕业答辩，费了不少脑子。对论文绞尽脑汁，还请求女朋友帮忙，毕竟毕业要紧。<br>四月份，辞职回南昌参加学校答辩，那时想，等我回来，从头再来。<br>五月份，在宿舍白天搞博客，晚上搞论文。可以说，很好耍。五月底，答辩结束。第二天我坐飞机来到了重庆，见到了她。<br>答辩告一段落了，终于毕业了，毕业快乐。</p><h2 id="上班，下班，买菜，做饭，最后洗碗。"><a href="#上班，下班，买菜，做饭，最后洗碗。" class="headerlink" title="上班，下班，买菜，做饭，最后洗碗。"></a>上班，下班，买菜，做饭，最后洗碗。</h2><p>六月份，在学校接到了一个应聘前端电话，然后我去面试了，面试成功，办理入职，后来因为项目周期短，压力大，加班文化，我辞职了。<br>八月份，来到了我司，无加班文化，mbp办公，下午茶，易相处的同事们。<br>九月份，买了Kindle，可以在轻轨上看书，最重要的是，我们有猫了，它的名字叫<a href="https://twitter.com/shamopooo" target="_blank" rel="noopener">九十</a>，和我的花名一样，九十是只橘猫，九十小时候生了一场病，打了两天的点滴，弱小无助，但如今已经有五斤了，果然大橘为重。<br>十月份，和女朋友去见了她家长，明年过年一定带回去。十月五号，女朋友的生日。在家里度过了一个开心难忘的生日。生日礼物送了oppo find x，颜值高，和她一样。<br>十一月份，双十一剁手买了Akko键盘，iPad2018，小米闹钟。 女朋友买了个粉色的键盘，少女心。<br>十二月份，带九十去打疫苗，九十出去还是有点怕生。第二针，背猫背包带九十去，第三针，在月底。</p><h2 id="念念不忘，必有回响。"><a href="#念念不忘，必有回响。" class="headerlink" title="念念不忘，必有回响。"></a>念念不忘，必有回响。</h2><p>2019， <a href="https://blog.shamopoo.top/about" target="_blank" rel="noopener">计划清单</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例，是时候写年度总结了。回想起来，时间如白驹过隙，从大四到工作，从学校正式步入社会，特此记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="日常簿" scheme="http://shamopoo.top/categories/%E6%97%A5%E5%B8%B8%E7%B0%BF/"/>
    
    
      <category term="日常" scheme="http://shamopoo.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="2018" scheme="http://shamopoo.top/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>原型链:prototype和__proto__区别</title>
    <link href="http://shamopoo.top/prototype/"/>
    <id>http://shamopoo.top/prototype/</id>
    <published>2018-12-17T07:24:31.000Z</published>
    <updated>2018-12-21T03:46:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在wx交流群看到了一个关于原型链的题目，引起了我对原型链探索的兴趣。</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="built_in">Object</span>.prototype.a = <span class="string">'a'</span><span class="built_in">Function</span>.prototype.a = <span class="string">'b'</span><span class="function"><span class="keyword">function</span> <span class="title">person</span> (<span class="params"></span>) </span>{}<span class="keyword">var</span> peter = <span class="keyword">new</span> person()peter.a  <span class="comment">// 😳 a or b</span></code></pre><p></p><a id="more"></a><p>当时，我的理解如下：<br><samp></samp></p><pre><code class="JAVASCRIPT">peter  =&gt;  <span class="function"><span class="params">__proto__</span>  =&gt;</span>  pesron.prototype  =&gt; <span class="function"><span class="params">__proto__</span> =&gt;</span> <span class="built_in">Object</span>.prototypeperson  =&gt;  <span class="function"><span class="params">__proto__</span>  =&gt;</span>  <span class="built_in">Function</span>.prototype  =&gt; <span class="function"><span class="params">__proto__</span> =&gt;</span> <span class="built_in">Object</span>.prototype</code></pre><p></p><p>问题来了，proto是什么东西？</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">在javascript的世界里，一切皆为对象。每个实例对象（object ）都有一个私有属性（称之为<strong>proto</strong>）指向它的原型对象（prototype)。该原型对象也有一个自己的原型对象(<strong>proto</strong>) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</a></p><p>可以说，区别就是原型链是靠<code>——proto——</code>来链接的,共同点都是用来实现基于原型的继承。</p><p>那么，下面的代码是为true:</p><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="comment">// Object.creat() 除外</span> obj.__proto__ === obj.constructor.prototype <span class="comment">// true</span></code></pre><p></p><h3 id="趁热打铁"><a href="#趁热打铁" class="headerlink" title="趁热打铁"></a>趁热打铁</h3><p><samp></samp></p><pre><code class="JAVASCRIPT"><span class="built_in">Function</span>.__proto__ == <span class="built_in">Function</span>.prototype <span class="comment">// true</span><span class="built_in">Object</span>.__proto__ == <span class="built_in">Object</span>.prototype <span class="comment">// false</span><span class="built_in">Object</span>.__proto__ == <span class="built_in">Function</span>.prototype <span class="comment">// true</span><span class="built_in">Function</span>.prototype.__proto__ == <span class="built_in">Object</span>.prototype <span class="comment">// true</span><span class="built_in">Object</span>.__proto__.__proto__ === <span class="built_in">Object</span>.prototype.constructor.prototype <span class="comment">// true</span><span class="built_in">Object</span>.__proto__.prototype <span class="comment">// undefined</span><span class="built_in">Function</span>.prototype.__proto__ == <span class="built_in">Object</span>.prototype <span class="comment">// true</span></code></pre><p></p><p>这时候，肯定会有点晕+_+，那祭出<a href="https://moetu.fastmirror.org/images/2018/12/20/utf-8-FsA8_UozPiTrwf-G_TE8cR1-ktlj537435246c961e2c.jpg" target="_blank" rel="noopener">原型链神图</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原型链到Object.prototype.——proto—— 结束，指向null。</p><p>Object.create()创建的对象没有继承Object.prototype。</p><p>原型链是靠——proto——来链接的，——proto——属性（原型）等于其构造函数的prototype<br>属性。</p><p>——proto——和prototype都是用来实现基于原型的继承。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在wx交流群看到了一个关于原型链的题目，引起了我对原型链探索的兴趣。&lt;/p&gt;
&lt;p&gt;&lt;samp&gt;&lt;/samp&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;JAVASCRIPT&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.a = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype.a = &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;person&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; peter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; person()
peter.a  &lt;span class=&quot;comment&quot;&gt;// 😳 a or b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="原型链" scheme="http://shamopoo.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>毕业快乐！</title>
    <link href="http://shamopoo.top/graduate/"/>
    <id>http://shamopoo.top/graduate/</id>
    <published>2018-07-04T02:15:22.000Z</published>
    <updated>2018-12-19T03:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>那一天， 我毕业了 !<br><a id="more"></a></p><p><div class="graduate-time" id="graduate-time"></div></p><script>  (function() {    var show = document.getElementById("graduate-time");    setInterval(function() {    var BirthDay = new Date('2018-07-04');    var today = new Date();    var timeold = (today.getTime() - BirthDay.getTime());    var msPerDay = 24 * 60 * 60 * 1000 * 365;    var e_yearsold = timeold / msPerDay;    var yearsold = Math.floor(e_yearsold);    var e_daysold = (e_yearsold - yearsold) * 365;    var daysold = Math.floor(e_daysold);    var e_hrsold = (e_daysold - daysold) * 24;    var hrsold = Math.floor(e_hrsold);    var e_minsold = (e_hrsold - hrsold) * 60;    var minsold = Math.floor((e_hrsold - hrsold) * 60);    var seconds = Math.floor((e_minsold - minsold) * 60);    var t = '毕业'     + (yearsold + '').padStart(2, '0') + "年"     + (daysold + '').padStart(3, '0') + "天"     + (hrsold + '').padStart(2, '0') + "小时"     + (minsold + '').padStart(2, '0')  + "分"     + (seconds + '').padStart(2, '0') + "秒"    show.innerHTML = t;    }, 1000)}());</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那一天， 我毕业了 !&lt;br&gt;
    
    </summary>
    
      <category term="日常簿" scheme="http://shamopoo.top/categories/%E6%97%A5%E5%B8%B8%E7%B0%BF/"/>
    
    
      <category term="毕业" scheme="http://shamopoo.top/tags/%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://shamopoo.top/git-command/"/>
    <id>http://shamopoo.top/git-command/</id>
    <published>2018-06-09T11:12:15.000Z</published>
    <updated>2018-12-20T07:26:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>进入新公司，要求使用git多人协同开发，记录一下git常用命令。<br><a id="more"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-配置用户信息"><a href="#1-配置用户信息" class="headerlink" title="1.  配置用户信息"></a>1.  配置用户信息</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户信息</span></span><br><span class="line">$ git config --global user.name “your name”</span><br><span class="line">$ git config --global user.email “your email”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户信息</span></span><br><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure></div><h3 id="2-本地生成SSH私钥和公钥"><a href="#2-本地生成SSH私钥和公钥" class="headerlink" title="2. 本地生成SSH私钥和公钥"></a>2. 本地生成SSH私钥和公钥</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否存在SSH</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/. ssh</span><br><span class="line"><span class="comment"># 不存在生成，进行下步</span></span><br><span class="line"><span class="comment"># 生成本地SSH私钥和公钥</span></span><br><span class="line">$ ssh-keygen -t rsa -C “your name”</span><br></pre></td></tr></table></figure></div><p> 这样在用户下的C:\Users\Administrator..ssh目录里就可以创建id_rsa和id_rsa.pub这两个文件。<br> 把id_ras.pub文件的内容复制到coding.net个人账户的SSH公钥中。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.  下载"></a>1.  下载</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆</span></span><br><span class="line">$ git <span class="built_in">clone</span> 仓库的SSH地址</span><br></pre></td></tr></table></figure></div><h3 id="2-关联"><a href="#2-关联" class="headerlink" title="2.  关联"></a>2.  关联</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地仓库关联远程仓库</span></span><br><span class="line">$ git remote add origin 远程仓库地址</span><br><span class="line"><span class="comment"># 测试是否关联成功</span></span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure></div><h3 id="3-推送"><a href="#3-推送" class="headerlink" title="3.  推送"></a>3.  推送</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库更新到本地</span></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment"># 查看文件状态</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># 部分文件添加到暂存区</span></span><br><span class="line">$ git  add  [file1] [file2]</span><br><span class="line"><span class="comment"># 当前目录所有文件添加到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 再次查看文件状态(添加的变为绿色)</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># 提交暂存区到仓库，并添加必要注释</span></span><br><span class="line">$ git commit -m ‘必要的注释’</span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure></div><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地所有分支</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 列出远程所有分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"><span class="comment"># 新建一个分支</span></span><br><span class="line">$ git branch  [branch-name]</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure></div><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时对多个文件执行了git add,但本次只想提交其中一部分文件</span></span><br><span class="line">$ git reset HEAD [filename]</span><br><span class="line"><span class="comment"># 文件执行了git add,但想撤销对其的修改</span></span><br><span class="line">$ git reset HEAD [filename]</span><br><span class="line">$ git checkout [filename]</span><br></pre></td></tr></table></figure></div><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销指定文件到指定版本</span></span><br><span class="line">$ git <span class="built_in">log</span> [filename]</span><br><span class="line">$ git checkout [commitID] [filename]</span><br><span class="line"><span class="comment"># 回滚到某次提交</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">$ git revert [commitID]</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进入新公司，要求使用git多人协同开发，记录一下git常用命令。&lt;br&gt;
    
    </summary>
    
      <category term="技能薄" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E8%96%84/"/>
    
    
      <category term="git" scheme="http://shamopoo.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo置顶文章及样式美化</title>
    <link href="http://shamopoo.top/hexo-top/"/>
    <id>http://shamopoo.top/hexo-top/</id>
    <published>2018-05-14T09:51:12.000Z</published>
    <updated>2018-12-19T03:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>文章置顶功能实现, top值越高越在前。由于官方并未给出置顶功能, 所以要手动修改。<br><blockquote class="pullquote tip"><p>sticky: 显示图钉样式<br>top: 置顶功能实现</p></blockquote></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在Hexo生成首页HTML时， top值越高越在前，达到文章置顶功能。</p><a id="more"></a><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>找到<code>node_modules\hexo-generator-index\lib\generator.js</code>文件。替换如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>找到<code>themes\主题\layout_macro\post.swig</code>文件。在<code>POST BLOCK</code>添加如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"set-top"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>找到<code>themes\主题\source\css_custom\custom.styl</code>文件。添加如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*置顶*/</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:first-of-type)</span> <span class="selector-class">.post-block</span> <span class="selector-class">.set-top</span> <span class="selector-tag">div</span>&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:last-of-type</span> <span class="selector-class">.post-block</span> <span class="selector-class">.set-top</span> <span class="selector-tag">div</span>&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-of-type</span> <span class="selector-class">.post-block</span> <span class="selector-class">.set-top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-of-type</span> <span class="selector-class">.post-block</span> <span class="selector-class">.set-top</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">113px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0bf</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: -<span class="number">3px</span> <span class="number">5px</span> <span class="number">6px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.5);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left , rgba(48,182,209,0.99),<span class="built_in">rgba</span>(43,70,191,0.99) <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-of-type</span> <span class="selector-class">.set-top</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="number">#31a4ce</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">4px</span> solid <span class="number">#31a4ce</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-of-type</span> <span class="selector-class">.set-top</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">4px</span> solid <span class="number">#2f5ec3</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">4px</span> solid <span class="number">#2f5ec3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: hexo置顶文章及样式美化</span><br><span class="line">date: 2018-05-14 17:51:12</span><br><span class="line">tags: - hexo</span><br><span class="line">categories: - 技能簿</span><br><span class="line">top: 100</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;文章置顶功能实现, top值越高越在前。由于官方并未给出置顶功能, 所以要手动修改。&lt;br&gt;&lt;blockquote class=&quot;pullquote tip&quot;&gt;&lt;p&gt;sticky: 显示图钉样式&lt;br&gt;top: 置顶功能实现&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;在Hexo生成首页HTML时， top值越高越在前，达到文章置顶功能。&lt;/p&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="hexo" scheme="http://shamopoo.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>VuePress搭建个人博客</title>
    <link href="http://shamopoo.top/VuePress/"/>
    <id>http://shamopoo.top/VuePress/</id>
    <published>2018-05-11T12:23:46.000Z</published>
    <updated>2018-12-19T03:30:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>借助<a href="https://vuepress.docschina.org/" target="_blank" rel="noopener">VuePress</a>文档用VuePress + github搭建博客, 初试VuePress。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>VuePress 网站实际上是由 Vue, Vue Router 和 webpack 驱动的单页面应用程序。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote class="pullquote warning"><p>兼容性注意事项<br>VuePress 要求 Node.js &gt;= 8。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g vuepress</span><br></pre></td></tr></table></figure></div><h2 id="克隆VuePress"><a href="#克隆VuePress" class="headerlink" title="克隆VuePress"></a>克隆VuePress</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:docschina/vuepress.git</span><br></pre></td></tr></table></figure></div><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> VuePress</span><br><span class="line">$ <span class="built_in">cd</span> docs</span><br><span class="line">$ vuepress dev</span><br></pre></td></tr></table></figure></div><blockquote class="pullquote tip"><p>VuePress dev server listening at <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br>出现上述提示，运行成功</p></blockquote><p>打开<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>查看效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;借助&lt;a href=&quot;https://vuepress.docschina.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VuePress&lt;/a&gt;文档用VuePress + github搭建博客, 初试VuePress。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;VuePress 网站实际上是由 Vue, Vue Router 和 webpack 驱动的单页面应用程序。&lt;/p&gt;
&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;blockquote class=&quot;pullquote warning&quot;&gt;&lt;p&gt;兼容性注意事项&lt;br&gt;VuePress 要求 Node.js &amp;gt;= 8。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="VuePress" scheme="http://shamopoo.top/tags/VuePress/"/>
    
  </entry>
  
  <entry>
    <title>「 付费后可查看 」</title>
    <link href="http://shamopoo.top/daily/"/>
    <id>http://shamopoo.top/daily/</id>
    <published>2018-05-10T07:27:18.000Z</published>
    <updated>2018-12-19T03:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入金额</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      支付成功可浏览
    
    </summary>
    
      <category term="日常簿" scheme="http://shamopoo.top/categories/%E6%97%A5%E5%B8%B8%E7%B0%BF/"/>
    
    
      <category term="日常" scheme="http://shamopoo.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>一台电脑上用多个git账户更新多个hexo博客</title>
    <link href="http://shamopoo.top/hexo-git/"/>
    <id>http://shamopoo.top/hexo-git/</id>
    <published>2018-05-05T07:00:58.000Z</published>
    <updated>2018-12-20T07:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>有时候我们一台电脑要更新两个甚至多个hexo博客, 而电脑默认保存一个git私钥/公钥。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>生成多个不同的私钥/公钥, 分别 hexo g 到多个的git账户，从而实现更新多个hexo博客。<br><a id="more"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.查看是否存在SSH密钥<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></div></p><p>如果有 id_rsa 和 id_rsa.pub，说明已存在一对密钥/公钥。</p><p>2.创建新的 私钥/公钥, 并指定秘钥名称, 如 id_rsa_second</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f  ~/.ssh/id_rsa_second -C <span class="string">"yourmail@xxx.com"</span></span><br></pre></td></tr></table></figure></div><p>完成后, 该目录下会多出 id_rsa_second 和 id_rsa_second.pub 两个文件</p><p>3.在 ~/.ssh 目录下创建一个名为 config 文件</p><p>将以下内容添加到 config 文件中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个账号，默认使用的账号</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"><span class="comment"># 第二个账号</span></span><br><span class="line">Host second.github.com  <span class="comment"># second为前缀名，可以任意设置</span></span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure></div><blockquote class="pullquote tip"><p>原理分析<br>1.ssh 客户端是通过类似 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:githubUserName/repName.git 的地址来识别使用本地的哪个私钥的，<br>地址中的 User 是@前面的git， Host 是@后面的github.com。<br>2.如果所有账号的 User 和 Host 都为 git 和 github.com，那么就只能使用一个私钥。<br>所以要对User 和 Host 进行配置，让每个账号使用自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，<br>如上面配置中的Host second.github.com。<br>3.配置了别名之后，新的地址就是<a href="mailto:git@second.github.com" target="_blank" rel="noopener">git@second.github.com</a>:githubUserName/repName.git。<br>这样 ssh 在连接时就可以区别不同的账号了。</p></blockquote><p>4.查看 SSH 密钥的值，分别添加到对应的 GitHub 账户中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br><span class="line">$ cat id_rsa_second.pub</span><br></pre></td></tr></table></figure></div><p>5.清空本地的 SSH 缓存，添加新的 SSH 密钥 到 SSH agent中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -D</span><br><span class="line">$ ssh-add id_rsa</span><br><span class="line">$ ssh-add id_rsa_second</span><br></pre></td></tr></table></figure></div><p>最后确认一下新秘钥已经添加成功</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span><br></pre></td></tr></table></figure></div><p>6.测试 ssh 链接</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@second.github.com</span><br></pre></td></tr></table></figure></div><blockquote class="pullquote tip"><p>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.<br>出现上述提示，连接成功</p></blockquote><p>7.进入项目文件夹，单独设置用户名/邮箱</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消全局 用户名/邮箱 配置</span></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line"><span class="comment"># 进入项目文件夹，单独设置每个repo 用户名/邮箱</span></span><br><span class="line">$ git config user.email <span class="string">"xxxx@xx.com"</span></span><br><span class="line">$ git config user.name <span class="string">"xxxx"</span></span><br></pre></td></tr></table></figure></div><p>查看设置是否成功</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></div><p>8.最后在 hexo 配置文件修改git地址</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@second.github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div><p>配置多个git账户重复以上步骤。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://e-e.iteye.com/blog/2359320" target="_blank" rel="noopener">一台电脑上用多个git账户</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;有时候我们一台电脑要更新两个甚至多个hexo博客, 而电脑默认保存一个git私钥/公钥。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;生成多个不同的私钥/公钥, 分别 hexo g 到多个的git账户，从而实现更新多个hexo博客。&lt;br&gt;
    
    </summary>
    
      <category term="技能簿" scheme="http://shamopoo.top/categories/%E6%8A%80%E8%83%BD%E7%B0%BF/"/>
    
    
      <category term="git" scheme="http://shamopoo.top/tags/git/"/>
    
      <category term="hexo" scheme="http://shamopoo.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>路飞赏金飙至15亿，荣登五皇宝座，即将赶超白胡子！</title>
    <link href="http://shamopoo.top/lufuy/"/>
    <id>http://shamopoo.top/lufuy/</id>
    <published>2018-04-28T13:02:00.000Z</published>
    <updated>2018-12-19T03:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" data-id="28211151" data-server="netease" data-type="song" data-mode="single"></div><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;aplayer&quot; data-id=&quot;28211151&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;single&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="动漫簿" scheme="http://shamopoo.top/categories/%E5%8A%A8%E6%BC%AB%E7%B0%BF/"/>
    
    
      <category term="路飞" scheme="http://shamopoo.top/tags/%E8%B7%AF%E9%A3%9E/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://shamopoo.top/hello-world/"/>
    <id>http://shamopoo.top/hello-world/</id>
    <published>2018-03-16T13:53:00.000Z</published>
    <updated>2018-12-03T07:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="事件簿" scheme="http://shamopoo.top/categories/%E4%BA%8B%E4%BB%B6%E7%B0%BF/"/>
    
    
      <category term="前端" scheme="http://shamopoo.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="http://shamopoo.top/tags/hexo/"/>
    
  </entry>
  
</feed>
